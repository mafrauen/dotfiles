scriptencoding utf-8
set encoding=utf-8
set nocompatible                " choose no compatibility with legacy vi
filetype off

call plug#begin('~/.vim/plugged')

" Plug 'editorconfig/editorconfig-vim'

" Languages
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'klen/python-mode'
Plug 'tpope/vim-git'
Plug 'plasticboy/vim-markdown'
Plug 'groenewege/vim-less'
Plug 'hail2u/vim-css3-syntax'
Plug 'juvenn/mustache.vim'
Plug 'rdolgushin/groovy.vim'
Plug 'Glench/Vim-Jinja2-Syntax'

Plug 'godlygeek/tabular'
Plug 'mileszs/ack.vim'
Plug 'tpope/vim-surround'
Plug 'kien/ctrlp.vim'
Plug 'mattn/emmet-vim'
Plug 'Lokaltog/vim-easymotion'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-fugitive'
Plug 'tomtom/tcomment_vim'
Plug 'Raimondi/delimitMate'
Plug 'scrooloose/syntastic'
Plug 'terryma/vim-multiple-cursors'
Plug 'pelodelfuego/vim-swoop'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Colors
Plug 'altercation/vim-colors-solarized'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'w0ng/vim-hybrid'
" Plug 'skammer/vim-css-color'

call plug#end()

" After new, run :BundleInstall

filetype plugin indent on       " load file type plugins + indentation

syntax enable
set showcmd                     " display incomplete commands
set relativenumber
set number
set colorcolumn=80
set synmaxcol=400

"" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode
set diffopt=filler,vertical

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

set ruler
set clipboard=unnamed
" :help fugitive#statusline
" set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
" Original statusline
" set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
if has("statusline")
 set statusline=%<%f\ %h%m%r%=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}%k\ %-14.(%l,%c%V%)\ %P
endif
set laststatus=2

set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.
set conceallevel=1

if has("gui_running")
  set guioptions-=T
  set guioptions-=r
  set guioptions-=L
  set guifont=Source\ Code\ Pro:h17
endif

set background=dark
colorscheme Tomorrow-Night

set backupdir=/var/tmp
set directory=/var/tmp

let mapleader = ","
let g:mapleader = ","

" turn off highlighting
nnoremap <leader><space> :noh<cr>

" map esc
imap jj <ESC>

" Used with matchit to go to next paren, etc.
map <tab> %
vmap <tab> %
vnoremap <tab> %

" Just testing this behavior
noremap H ^
noremap L $
vnoremap L g_

" Select last paste
map <leader>v '[V']

" ACK
set grepprg=ack
nnoremap <leader>a :Ack<space>
nnoremap <leader>n :cn<cr>
noremap <leader>A :Ack<space><C-r><C-w><CR>

" Move windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <C-D-cr> <C-W>_<C-W>\|
nnoremap <D-cr> :call MaximizeToggle ()<CR>

function! MaximizeToggle()
  if exists("s:maximize_session")
    exec "source " . s:maximize_session
    call delete(s:maximize_session)
    unlet s:maximize_session
    let &hidden=s:maximize_hidden_save
    unlet s:maximize_hidden_save
  else
    let s:maximize_hidden_save = &hidden
    let s:maximize_session = tempname()
    set hidden
    exec "mksession! " . s:maximize_session
    only
  endif
endfunction

" substitute word under cursor
nnoremap <Leader>r :%s/\<<C-r><C-w>\>/

" EasyMotion
let g:EasyMotion_smartcase = 1

map <space> <Plug>(easymotion-s)
omap <space> <Plug>(easymotion-s)

map <leader>/ <Plug>(easymotion-sn)
omap <leader>/ <Plug>(easymotion-tn)

" map L <Plug>(easymotion-lineforward)
" map <Leader>j <Plug>(easymotion-j)
" map <Leader>k <Plug>(easymotion-k)
" map H <Plug>(easymotion-linebackward)


" " search forwards
" nmap <space> <leader><leader>f
" vmap <space> <leader><leader>f
" " search backwards
" nmap <S-space> <leader><leader>F
" nmap <C-space> <leader><leader>F
" vmap <S-space> <leader><leader>F
" vmap <C-space> <leader><leader>F

nnoremap <Leader>j :call IssueKey()<CR>
function! IssueKey()
  let key = system("git symbolic-ref HEAD | awk 'match($0, /[A-Z]+-[0-9]+/) { printf \"%s\",substr($0, RSTART, RLENGTH) }'")
  call setline(line('.'), getline('.').'['.key.'] ')
endfunction

" javascript
" autocmd FileType javascript syn match jsArrowFunction "=>" contained conceal cchar=⍄
let g:javascript_conceal = 1
let g:javascript_conceal_function = "ƒ"
let g:javascript_conceal_prototype = "¶"
let g:javascript_conceal_arrow_function = "⍄"
let g:jsx_ext_required = 0
" autocmd BufRead,BufNewFile *.js set ft=javascript.jsx
" let g:javascript_conceal_null       = "ø"
" let g:javascript_conceal_this       = "@"
" let g:javascript_conceal_return     = "⇚"
" let g:javascript_conceal_undefined  = "¿"
" let g:javascript_conceal_NaN        = "ℕ"

" fugitive
nnoremap <leader>s :Gstatus<cr>

" ctrlp
let g:ctrlp_map = '<leader>f'
" let g:ctrlp_cmd = 'CtrlP'
nmap <leader>b :CtrlPBuffer<CR>
nmap <leader>B :CtrlPMRU<CR>
nmap <leader>L :CtrlPLine<CR>
nnoremap <leader>T :CtrlPTag<CR>
nnoremap <leader>F :CtrlP /Users/mafrauen/Code/Envs/bb/lib/python2.7/site-packages/<CR>
set wildignore+=*.pyc " ignore compiled python
set wildignore+=*/node_modules/*
set wildignore+=*/local/static/* " ignore static files
set wildignore+=*/local/build/* " ignore static files
set wildignore+=*/target/classes/* " ignore static files

" emmet
autocmd FileType htmldjango,javascript,javascript.jsx,css,less,jinja imap <C-L> <plug>(emmet-expand-abbr)
" let g:user_emmet_expandabbr_key=''
" let g:user_emmet_install_global = 0
" autocmd FileType html,css EmmetInstall

" tagbar
let g:tagbar_foldlevel = 0
let g:tagbar_autoshowtag = 1
nnoremap <leader>t :TagbarOpenAutoClose<CR>

" delimitMate
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1

" quick way to get rid of quickfix
nnoremap <leader>c :ccl \| pc<CR>

" python
let g:pymode = 1
let g:pymode_folding = 0
" for fast machines
let g:pymode_syntax_slow_sync=0
" don't let rope recursively search dirs for .ropeproject
let g:pymode_rope_guess_project=1
" add projects dir to python path
let g:pymode_paths=['~/']
let g:pymode_lint = 0
let g:pymode_doc = 0
let g:pymode_virtualenv = 1
" let g:pymode_lint_checkers=['pyflakes']
let g:pymode_lint_cwindow=0
let g:pymode_rope = 1
let g:pymode_rope_lookup_project = 0
let g:pymode_rope_goto_definition_bind = '<leader>g'
let g:pymode_rope_goto_definition_cmd = 'e'
let g:pymode_breakpoint_bind = '<leader>d'

" django
autocmd BufRead,BufNewFile *.mustache,*.html set ft=htmldjango

" Syntastic
let g:syntastic_python_checkers=['pyflakes', 'flake8']
let g:syntastic_javascript_checkers=['eslint']

" Snippets
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]

function! Multiple_cursors_before()
  if exists('*SwoopFreezeContext') != 0
    call SwoopFreezeContext()
  endif
endfunction

function! Multiple_cursors_after()
  if exists('*SwoopUnFreezeContext') != 0
    call SwoopUnFreezeContext()
  endif
endfunction
