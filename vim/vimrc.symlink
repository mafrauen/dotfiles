scriptencoding utf-8
set encoding=utf-8
set nocompatible                " choose no compatibility with legacy vi
filetype off

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Languages
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'hail2u/vim-css3-syntax'
Plug 'styled-components/vim-styled-components'

Plug 'vim-python/python-syntax'
Plug 'vim-scripts/indentpython.vim'
Plug 'tweekmonster/django-plus.vim'
Plug 'mitsuhiko/vim-jinja'

Plug 'groenewege/vim-less'
Plug 'juvenn/mustache.vim'

Plug 'w0rp/ale'
Plug 'mileszs/ack.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-surround'
Plug 'Lokaltog/vim-easymotion'
Plug 'tpope/vim-fugitive'
Plug 'tomtom/tcomment_vim'
Plug 'jiangmiao/auto-pairs'
Plug 'alvan/vim-closetag'
Plug 'terryma/vim-multiple-cursors'
Plug 'ludovicchabant/vim-gutentags'

Plug 'ajh17/VimCompletesMe'

Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

" Colors
Plug 'chriskempson/vim-tomorrow-theme'


call plug#end()

" After new, run :PlugInstall

filetype plugin indent on       " load file type plugins + indentation



syntax enable
" set showcmd                     " display incomplete commands
" set relativenumber
set number
set colorcolumn=80
" set synmaxcol=400
set autoindent
set smartindent
set smarttab

"" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode
set diffopt=filler,vertical
set completeopt-=preview

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

set ruler
set clipboard=unnamed
set laststatus=2

set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.
set conceallevel=1

set formatoptions+=j " Delete comment character when joining commented lines

if has("gui_running")
  set guioptions-=T
  set guioptions-=r
  set guioptions-=L
  set guifont=Source\ Code\ Pro:h17
endif

set background=dark
colorscheme Tomorrow-Night

set backupdir=/var/tmp
set directory=/var/tmp
set wildignore+=*.pyc " ignore compiled python

let mapleader = ","
let g:mapleader = ","

" turn off highlighting
nnoremap <leader><space> :noh<cr>

" Used with matchit to go to next paren, etc.
map <tab> %
vmap <tab> %
vnoremap <tab> %

" quick way to get rid of quickfix
nnoremap <leader>c :ccl \| pc<CR>

noremap H ^
noremap L $
vnoremap L g_

nnoremap gv `[V`]

" Move windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" EasyMotion
let g:EasyMotion_smartcase = 1
map \ <Plug>(easymotion-sn)
" map <space> <Plug>(easymotion-sn)


nnoremap <Leader>j :call IssueKey()<CR>
function! IssueKey()
  let key = system("git symbolic-ref HEAD | awk 'match($0, /[A-Z]+-[0-9]+/) { printf \"%s\",substr($0, RSTART, RLENGTH) }'")
  call setline(line('.'), getline('.').'['.key.'] ')
endfunction

" javascript
" let g:jsx_ext_required = 0
let g:javascript_conceal = 1
let g:javascript_conceal_function = "∆í"
let g:javascript_conceal_prototype = "¬∂"
let g:javascript_conceal_arrow_function = "‚çÑ"
let g:javascript_plugin_flow = 1
" let g:javascript_conceal_noarg_arrow_function = "üûÖ"
" autocmd BufRead,BufNewFile *.js set ft=javascript.jsx
" let g:javascript_conceal_null       = "√∏"
" let g:javascript_conceal_this       = "@"
" let g:javascript_conceal_return     = "‚áö"
" let g:javascript_conceal_undefined  = "¬ø"
" let g:javascript_conceal_NaN        = "‚Ñï"
autocmd BufRead,BufNewFile *.js :iab log console.log()<Left>

" django
autocmd BufRead,BufNewFile *.html,.jinja :iab tt {{}}<Left><Left>
autocmd BufRead,BufNewFile *.html,.jinja :iab vv {%%}<Left><Left>

" python
nnoremap <leader>F :e /Users/mfrauenholtz/.virtualenvs/bb/lib/python2.7/site-packages/<CR>
let g:python_highlight_all = 1
" autocmd BufRead,BufNewFile *.mustache,*.html set ft=htmldjango
au BufNewFile,BufRead *.jinja set ft=htmljinja
let g:htmljinja_disable_detection = 1

" mdx.js
autocmd BufRead,BufNewFile *.mdx set ft=markdown

" fugitive
nnoremap <leader>s :Gstatus<cr>

" FZF
nmap <leader>f :GFiles<CR>
nmap <leader>t :Tags<CR>
nmap ; :Buffers<CR>
nmap <leader>l :BLines<CR>
nmap <space> :BLines<CR>
nmap <leader>b :Lines<CR>
set grepprg=rg\ --vimgrep\ --no-heading
set grepformat=%f:%l:%c:%m,%f:%l:%m
set grepprg=rg\ --vimgrep
command! -nargs=+ -bar Find silent! grep! <args>|lwindow|redraw!

" Close tags
let g:closetag_xhtml_filenames = '*.js'
let g:closetag_emptyTags_caseSensitive = 1
let g:closetag_filenames = '*.js'


" Tags
let g:gutentags_file_list_command = 'rg --files'


" ALE
let g:ale_fix_on_save = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_javascript_prettier_use_local_config = 1
let g:ale_linters = {}
let g:ale_fixers = {}
" maybe unused
" let g:ale_open_list = 0
" let g:ale_set_quickfix = 0
" let g:ale_set_loclist = 0

" let g:ale_linters.javascript = ['eslint', 'flow']
" let g:ale_linters.python = ['pyflakes', 'flake8']
let g:ale_linters.javascript = ['eslint', 'flow', 'flow-language-server']
let g:ale_linters.python = ['pyflakes', 'flake8', 'pyls']

let g:ale_fixers.javascript = ['prettier']
" let g:ale_fixers.python = ['yapf']

" nmap <leader>g <Plug>(ale_go_to_definition)
" nmap K <Plug>(ale_hover)
" set completeopt=menu,menuone,preview,noselect,noinsert
" let g:ale_completion_enabled = 1

" let g:ale_linters = {
" \   'javascript': ['eslint', 'flow'],
" \   'python': [],
" \}
" let g:ale_linters = {
" \   'javascript': ['eslint', 'flow', 'flow-language-server'],
" \   'python': ['pyflakes', 'flake8', 'pyls'],
" \}
" let g:ale_fixers = {
" \   'javascript': ['prettier'],
" \}
" let g:ale_fixers = {
" \   'javascript': ['prettier'],
" \   'python': ['yapf'],
" \}

let g:LanguageClient_serverCommands = {}
let g:LanguageClient_serverCommands.javascript = ['flow', 'lsp']
let g:LanguageClient_serverCommands['javascript.jsx'] = ['flow', 'lsp']
let g:LanguageClient_serverCommands.python = ['pyls']

" Turn off quickfix for LSP
let g:LanguageClient_diagnosticsEnable = 0
nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> <leader>g :call LanguageClient_textDocument_definition()<CR>
set completefunc=LanguageClient#complete

" let g:LanguageClient_serverCommands = {
"     \ 'javascript': ['flow-language-server', '--stdio'],
"     \ 'javascript.jsx': ['flow-language-server', '--stdio'],
"     \ 'python': ['pyls'],
"     \ }
" let g:LanguageClient_serverCommands = {
"     \ 'javascript': ['flow', 'lsp'],
"     \ 'javascript.jsx': ['flow', 'lsp'],
"     \ 'python': ['pyls'],
"     \ }
