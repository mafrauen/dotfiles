set nocompatible                " choose no compatibility with legacy vi
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

" Colors
Bundle 'altercation/vim-colors-solarized'
Bundle 'chriskempson/vim-tomorrow-theme'
Bundle 'skammer/vim-css-color'

" Languages
Bundle 'tpope/vim-git'
Bundle 'kchmck/vim-coffee-script'
Bundle 'digitaltoad/vim-jade'
Bundle 'tpope/vim-markdown'
Bundle 'groenewege/vim-less'
Bundle 'juvenn/mustache.vim'

Bundle 'mileszs/ack.vim'
Bundle 'tpope/vim-surround'
Bundle 'kien/ctrlp.vim'
Bundle 'mattn/zencoding-vim'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'majutsushi/tagbar'
Bundle 'tpope/vim-fugitive'
Bundle 'tomtom/tcomment_vim'
Bundle 'Raimondi/delimitMate'
Bundle 'Valloric/YouCompleteMe'
Bundle 'scrooloose/syntastic'
" After new, run :BundleInstall

filetype plugin indent on       " load file type plugins + indentation

syntax enable
set encoding=utf-8
set showcmd                     " display incomplete commands
"set shellcmdflag=-ic            " use RVM version of ruby
set shell=/bin/sh            " use RVM version (Using vim with rvm)
set number
set colorcolumn=80

"" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode
" set foldmethod=indent

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

set ruler
set clipboard=unnamed
" :help fugitive#statusline
" set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
" Original statusline
" set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
if has("statusline")
 set statusline=%<%f\ %h%m%r%=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}%k\ %-14.(%l,%c%V%)\ %P
endif
set laststatus=2

set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.

if has("gui_running")
  set guioptions-=T
  set guioptions-=r
  set guioptions-=L
  set guifont=Inconsolata:h14
endif

set background=dark
colorscheme Tomorrow-Night

set backupdir=/var/tmp
set directory=/var/tmp

let mapleader = ","
let g:mapleader = ","

" turn off highlighting
nnoremap <leader><space> :noh<cr>

" map esc
imap jj <ESC>

" ACK
set grepprg=ack
nnoremap <leader>a :Ack 
nnoremap <leader>n :cn<cr>

" Move windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" EasyMotion
" search forwards
nmap <space> <leader><leader>f
" search backwards
nmap <S-space> <leader><leader>F
nmap <C-space> <leader><leader>F

" fugitive
nnoremap <leader>s :Gstatus<cr>

" ctrlp
let g:ctrlp_map = '<leader>f'
nnoremap <leader>l :CtrlP /Users/mfrauenholtz/Documents/Envs/bb/lib/python2.7/site-packages/<CR>
set wildignore+=*.pyc " ignore compiled python
set wildignore+=*/node_modules/*
set wildignore+=*/local/static/* " ignore static files

" zencoding
let g:user_zen_expandabbr_key = '<leader>H'

" tagbar
nnoremap <leader>t :TagbarOpenAutoClose<CR>

" delimitMate
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1
autocmd BufRead,BufNewFile *.mustache,*.html let b:delimitMate_matchpairs = "(:),[:],{:},<:>,%: %"

" quick way to get rid of quickfix
nnoremap <leader>c :ccl<CR>
